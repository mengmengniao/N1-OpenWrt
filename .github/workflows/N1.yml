#
# The True Graduation Workflow for Building a Custom Lede Firmware for N1
# Final Version - Incorporates aggressive disk space cleaning AND the ultimate dependency list.
#

name: Build Lede for N1 (Custom, Kernel 5.10)

on:
  workflow_dispatch:
   inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  DIY_SH: diy.sh
  CONFIG_FILE: armsr/armv8/.config
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Free up disk space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Install The Ultimate Build Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # Use the ultimate dependency list you provided to ensure a successful build.
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison btrfs-progs build-essential bzip2 ca-certificates ccache clang cmake coreutils cpio curl device-tree-compiler ecj fakeroot fastjar flex g++-multilib gawk gcc-multilib gettext genisoimage git git-core gnutls-dev gperf gzip haveged help2man intltool jq lib32gcc-s1 libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pigz pkgconf python2 python2.7 python3 python3-docutils python3-pip python3-ply python3-pyelftools python3-setuptools qemu-utils quilt re2c rsync scons squashfs-tools subversion swig tar texinfo uglifyjs unzip upx upx-ucl vim wget xmlto xsltproc xxd xz-utils yasm zip zlib1g-dev zstd
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Clone Lede source code
      run: |
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        cd /workdir
        git clone $REPO_URL -b $REPO_BRANCH --single-branch --depth=1 openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Apply core patches
      run: |
        cd openwrt
        patch -p1 -f < $GITHUB_WORKSPACE/patches/0001-musl-elf.h-add-typedefs-for-Elf_Relr.patch || true
        patch -p1 -f < $GITHUB_WORKSPACE/patches/0002-kernel-add-XDP-sockets-support.patch || true
        patch -p1 -f < $GITHUB_WORKSPACE/patches/0003-scripts-optimize-download-mirrors.patch || true
        patch -p1 -f < $GITHUB_WORKSPACE/patches/0004-toolchain-add-libquadmath-support.patch || true

    - name: Cache build dependencies
      uses: actions/cache@v4
      with:
        path: |
          /workdir/openwrt/staging_dir
          /workdir/openwrt/dl
        key: ${{ runner.os }}-lede-master-ultimate-${{ hashFiles('**/diy.sh', '**/patches/*') }}
        restore-keys: |
          ${{ runner.os }}-lede-master-ultimate-

    - name: Load custom feeds and config
      run: |
        chmod +x $DIY_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SH
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        mv $GITHUB_WORKSPACE/$CONFIG_FILE ./.config

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@main
      if: github.event.inputs.ssh == 'true'

    - name: Download all package sources
      working-directory: ./openwrt
      run: |
        make defconfig
        make download -j$(nproc)

    - name: Compile the firmware
      id: compile
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Package N1 firmware using openwrt_packit
      if: steps.compile.outputs.status == 'success'
      uses: unifreq/openwrt_packit@master
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/armsr/armv8/*rootfs.tar.gz
        KERNEL_REPO_URL: breakingbadboy/OpenWrt
        KERNEL_VERSION_NAME: 5.10.y
        PACKAGE_SOC: diy
        GZIP_IMGS: .xz
        SCRIPT_DIY_PATH: armsr/armv8/mk_s905d_n1.sh
        WHOAMI: mengmengniao
        SW_FLOWOFFLOAD: 0
        SFE_FLOW: 0

    - name: Upload firmware to release
      if: steps.compile.outputs.status == 'success'
      uses: softprops/action-gh-release@master
      with:
        tag_name: Lede_N1_K5.10_Custom_${{ env.PACKAGED_OUTPUTDATE }}
        files: ${{ env.PACKAGED_OUTPUTPATH }}/*.img.xz
        body: |
          基于 Lean's LEDE (master) + Kernel 5.10 定制编译
          * 核心功能: Passwall, SSR-Plus, Argon, Docker, MosDNS, 晶晨宝盒
          * IP: 192.168.11.2 (请根据您的 `files` 目录确认)
          * 账户: root
          * 密码: password

    - name: Delete old workflow runs and releases
      uses: dev-drprasad/delete-older-releases@master
      with:
        keep_latest: 5
        delete_tags: true